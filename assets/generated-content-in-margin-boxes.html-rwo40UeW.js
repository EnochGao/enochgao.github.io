import{_ as p,r as i,o as c,c as o,b as s,d as n,e as t,a as e}from"./app-CnbvU9a-.js";const l={},u=e(`<h1 id="边距框中生成内容" tabindex="-1"><a class="header-anchor" href="#边距框中生成内容" aria-hidden="true">#</a> 边距框中生成内容</h1><h2 id="页面边距框" tabindex="-1"><a class="header-anchor" href="#页面边距框" aria-hidden="true">#</a> 页面边距框</h2><p>页面框由两种类型的区域组成:页面区域和页边距框。</p><p>页面区域是页面框的内容区域。它是所有 HTML 内容将流入的空间。当此内容耗尽空间时，将自动创建另一个页面。这就是 paged.js 的 chunker 部分所做的。</p><p>页面的边缘被分成 16 个方框，你可以把生成的内容放在这些方框里，比如页码和页头。这些方框被称为<code>margin boxes</code>。</p><p>每个都有自己的边距、边框、填充和内容区域。默认情况下，它们的大小由页面框的边距决定。</p><p>下面的图表代表了 W3C 定义的 16 个边框：</p><p><img src="https://pagedjs.org/images/margin-boxes.png" alt="img"></p><p>你可以在 @page 规则中选择这个边距框，规则如<code>@top-left</code> ，<code>@bottom-right-corner</code> ， <code>@left-middle</code> 等。 你可以在页面边距框中添加内容，属性为 <code>content</code> 。</p><p>下面的代码将标题放在所有右页的<code>@top-right</code> 边距框中：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@page</span><span class="token punctuation">:</span> right</span> <span class="token punctuation">{</span>
  <span class="token atrule"><span class="token rule">@top-right</span></span> <span class="token punctuation">{</span>
    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&#39;My title&#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>页边空白框列表：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@top-left-corner</span></span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
<span class="token atrule"><span class="token rule">@top-left</span></span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
<span class="token atrule"><span class="token rule">@top-center</span></span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
<span class="token atrule"><span class="token rule">@top-right</span></span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
<span class="token atrule"><span class="token rule">@top-right-corner</span></span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
<span class="token atrule"><span class="token rule">@left-top</span></span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
<span class="token atrule"><span class="token rule">@left-middle</span></span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
<span class="token atrule"><span class="token rule">@left-bottom</span></span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
<span class="token atrule"><span class="token rule">@right-top</span></span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
<span class="token atrule"><span class="token rule">@right-middle</span></span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
<span class="token atrule"><span class="token rule">@right-bottom</span></span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
<span class="token atrule"><span class="token rule">@bottom-left-corner</span></span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
<span class="token atrule"><span class="token rule">@bottom-left</span></span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
<span class="token atrule"><span class="token rule">@bottom-center</span></span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
<span class="token atrule"><span class="token rule">@bottom-right</span></span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
<span class="token atrule"><span class="token rule">@bottom-right-corner</span></span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="页计数器" tabindex="-1"><a class="header-anchor" href="#页计数器" aria-hidden="true">#</a> 页计数器</h2><p>为了定义页码，Paged.js 使用了一个 CSS 计数器，它在每个新页面上都会增加。</p><p>为了在页面上插入页码或检索文档中的总页数，W3C 提出了一个名为 <code>page</code> 的特定计数器。计数器声明必须在 <code>margin-boxes</code> 声明中的 <code>content</code> 属性中使用。 下面的示例在左下角的方框中声明页码：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@page</span></span> <span class="token punctuation">{</span>
  <span class="token atrule"><span class="token rule">@bottom-left</span></span> <span class="token punctuation">{</span>
    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token function">counter</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你也可以在页码前添加一些文本：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@page</span></span> <span class="token punctuation">{</span>
  <span class="token atrule"><span class="token rule">@bottom-left</span></span> <span class="token punctuation">{</span>
    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&#39;page &#39;</span> <span class="token function">counter</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要计算文档的总页数，可以这样写：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@page</span></span> <span class="token punctuation">{</span>
  <span class="token atrule"><span class="token rule">@bottom-left</span></span> <span class="token punctuation">{</span>
    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&#39;Page &#39;</span> <span class="token function">counter</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span> <span class="token string">&#39; of &#39;</span> <span class="token function">counter</span><span class="token punctuation">(</span>pages<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="重置页计数器" tabindex="-1"><a class="header-anchor" href="#重置页计数器" aria-hidden="true">#</a> 重置页计数器</h3>`,22),d={href:"https://gitlab.coko.foundation/pagedjs/pagedjs/-/issues/91",target:"_blank",rel:"noopener noreferrer"},r=e(`<h2 id="命名字符串-传统的页眉页脚" tabindex="-1"><a class="header-anchor" href="#命名字符串-传统的页眉页脚" aria-hidden="true">#</a> 命名字符串：传统的页眉页脚</h2><p>创建页眉页脚最快的方法是使用内容区域中已有的内容。命名字符串用于创建页眉页脚：它们复制文本以便在边距框中重复使用。</p><p>首先，所选元素的文本内容使用 <code>string-set</code> 和自定义标识符(在下面的代码中，我们称它为“title”，作为变量，你可以给它取任何有意义的名字)克隆到一个命名字符串中。在下面的例子中，每当一个新的 <code>&lt;h2&gt;</code> 出现在 HTML 中，命名字符串中的内容就会更新为 <code>&lt;h2&gt;</code>中的文本。(如果你喜欢，也可以用类选择器来选择它)。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">h2</span> <span class="token punctuation">{</span>
  <span class="token property">string-set</span><span class="token punctuation">:</span> title <span class="token function">content</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来， <code>string()</code> 函数通过 <code>content</code> 属性将一个命名字符串的值复制到外边距框中。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@page</span></span> <span class="token punctuation">{</span>
  <span class="token atrule"><span class="token rule">@bottom-center</span></span> <span class="token punctuation">{</span>
    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token function">string</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>string</code> 属性的作用类似于变量。它读取 DOM，每次遇到新的 2 级标题时，它都会更改页面上的变量。这个变量会被传递到页面的外边距框中，以及接下来的所有外边距框中，直到有新的标题为止。</p><p><img src="https://pagedjs.org/images/string-set.png" alt="img"></p><h2 id="string-set-选择内容" tabindex="-1"><a class="header-anchor" href="#string-set-选择内容" aria-hidden="true">#</a> string-set 选择内容</h2>`,9),g={href:"https://gitlab.coko.foundation/pagedjs/pagedjs/issues/45",target:"_blank",rel:"noopener noreferrer"},k={href:"https://gitlab.coko.foundation/pagedjs/pagedjs/issues/42",target:"_blank",rel:"noopener noreferrer"},m=e(`<p>文档需要完成</p><p>可以指定要选择元素的哪一部分来构造命名字符串的值。此参数是强制的。</p><ul><li><code>string-set: &lt;identifier&gt; content(text)</code> ：元素的字符串值(默认值)</li><li><code>string-set: &lt;identifier&gt; content(first-letter)</code> ：元素的第一个字母(定义在 <code>::first-letter</code> 伪元素中)</li><li><code>string-set: &lt;identifier&gt; content(after)</code> ：<code>::after</code> 伪元素的字符串值</li><li><code>string-set: &lt;identifier&gt; attr(&lt;identifier-attr&gt;)</code> ：返回由属性标识符( data-attribute ， href ， title ...) 定义的属性的字符串值。</li></ul><p>在同一个 <code>string-set</code> 中可以定义多个值。</p><p>示例:</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">h2::before</span> <span class="token punctuation">{</span>
  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&#39;Chapter &#39;</span> <span class="token function">counter</span><span class="token punctuation">(</span>countChapter<span class="token punctuation">,</span> upper-roman<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">h2</span> <span class="token punctuation">{</span>
  <span class="token property">string-set</span><span class="token punctuation">:</span> titleBefore <span class="token function">content</span><span class="token punctuation">(</span>before<span class="token punctuation">)</span><span class="token punctuation">,</span> title <span class="token function">content</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token atrule"><span class="token rule">@page</span></span> <span class="token punctuation">{</span>
  <span class="token atrule"><span class="token rule">@bottom-center</span></span> <span class="token punctuation">{</span>
    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token function">string</span><span class="token punctuation">(</span>titleBefore<span class="token punctuation">)</span> <span class="token string">&#39;. &#39;</span> <span class="token function">string</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> first<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="命名字符串的样式" tabindex="-1"><a class="header-anchor" href="#命名字符串的样式" aria-hidden="true">#</a> 命名字符串的样式</h2><p>内容是复制的，因此要对其进行样式化，必须直接在页边距框中应用样式。</p><p>例如，如果你想把标题的字体大小设置为 11px：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@page</span></span> <span class="token punctuation">{</span>
  <span class="token atrule"><span class="token rule">@bottom-center</span></span> <span class="token punctuation">{</span>
    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token function">string</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">text-transform</span><span class="token punctuation">:</span> uppercasse<span class="token punctuation">;</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span> 11px<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这就是在 margin box 中“调用”指定字符串时创建的 DOM：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>pagedjs_margin pagedjs_margin-bottom-center hasContent<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>pagedjs_margin-content<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>::after<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>margin 盒子的内容被插入到 <code>div</code> 元素的 <code>::after</code> 伪元素的 <code>content</code> 属性中，该伪元素的类名为 “pagedjs_margin-content”。</p><p>你也可以使用这个类和 ::after 伪元素来进行样式。</p><h2 id="运行元素-包含特定-复杂-内容的页眉-页脚" tabindex="-1"><a class="header-anchor" href="#运行元素-包含特定-复杂-内容的页眉-页脚" aria-hidden="true">#</a> 运行元素:包含特定(复杂)内容的页眉/页脚</h2><p>在某些情况下，<code>string-set</code> 并不适合特定或复杂的运行页眉和页脚。例如，如果你需要:</p><ul><li>要保持 HTML 标签包含在页眉/页脚( <code>&lt;em&gt;</code> ， <code>&lt;span&gt;</code> ，<code>&lt;br&gt;</code>…)</li><li>在页眉/页脚插入图像或象形图(使用 <code>&lt;img&gt;</code> 或 <code>&lt;svg&gt;</code> )</li><li>如果标题太长，要从语义上缩短它(不要使用 <code>text-overflow: ellipsis</code>属性，而是用一个片段替换标题)</li><li>在发票或报告等文件的所有页面上重复复杂的元素(地址、联系方式…)</li></ul><p>为此，你可以使用具有 <code>position</code> 属性和 <code>element()</code> 函数的运行元素。 <code>position</code> 属性从正常流中删除元素(而不是像 <code>string-set</code> 属性那样复制它)，并使用 <code>element()</code> 函数将它移动到外边距框中</p><p>这种技术可以让你保留元素的所有 HTML 结构。但你必须在 HTML 中添加专用元素。</p><p>在下面的示例中，我们希望保留标题中包含的斜体。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>chapitre-4<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>The protagonist of <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">&gt;</span></span>Macbeth<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">&gt;</span></span>Macbeth<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">&gt;</span></span> is a tragedy by William Shakespeare; it is thought to have been first performed in 1606. It dramatises the damaging physical and psychological effects of political ambition on those who seek power for its own sake...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先，在 HTML 中添加用于运行 title 的专用元素(就在标题之后)，并将标题复制进去。在这里，它是一个带有 <code>.title</code> 样式类的段落。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>chapitre-4<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>The protagonist of <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">&gt;</span></span>Macbeth<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>title<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>The protagonist of <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">&gt;</span></span>Macbeth<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">&gt;</span></span>Macbeth<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">&gt;</span></span> is a tragedy by William Shakespeare; it is thought to have been first performed in 1606. It dramatises the damaging physical and psychological effects of political ambition on those who seek power for its own sake...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后，将元素的 <code>position</code> 设置为 <code>running</code>。在这里，<code>titleRunning</code> 是一个自定义标识符，你可以将其命名为对你有意义的任何名称。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.title</span> <span class="token punctuation">{</span>
  <span class="token property">position</span><span class="token punctuation">:</span> <span class="token function">running</span><span class="token punctuation">(</span>titleRunning<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，通过 <code>content</code> 属性，用 <code>element()</code> 函数将元素放入外边距框中:</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@page</span></span> <span class="token punctuation">{</span>
  <span class="token atrule"><span class="token rule">@top-center</span></span> <span class="token punctuation">{</span>
    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token function">element</span><span class="token punctuation">(</span>titleRunning<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>.title</code> 元素现在从您的文档流中删除，并重复到页面的顶部中心边距框中。它的行为与命名字符串类似，如果在 <code>DOM</code> 中遇到一个新的 <code>.title</code> 元素，该元素在新页面和下一个页面中都会发生变化。</p><p>注意: <code>element()</code> 函数不能与 <code>content</code> 属性的其他可能值组合使用。</p><h2 id="设置运行元素的样式" tabindex="-1"><a class="header-anchor" href="#设置运行元素的样式" aria-hidden="true">#</a> 设置运行元素的样式</h2><p>因为复制了元素，所以所有的样式都被复制了，也就是说，如果你对 <code>.title</code> 元素进行了样式化，那么样式将被保留在页边距框中。</p><p>使用以下代码，你的运行标题将以大写字母和 11px 的大小显示：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.title</span> <span class="token punctuation">{</span>
  <span class="token property">position</span><span class="token punctuation">:</span> <span class="token function">running</span><span class="token punctuation">(</span>titleRunning<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">text-transform</span><span class="token punctuation">:</span> uppercasse<span class="token punctuation">;</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> 11px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token atrule"><span class="token rule">@page</span></span> <span class="token punctuation">{</span>
  <span class="token atrule"><span class="token rule">@top-center</span></span> <span class="token punctuation">{</span>
    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token function">element</span><span class="token punctuation">(</span>titleRunning<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是当你把一个正在运行的元素移到边距中时创建的 DOM:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>pagedjs_margin pagedjs_margin-top-center hasContent<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>pagedjs_margin-content<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>title<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>The protagonist of <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">&gt;</span></span>Macbeth<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以看到这个段落和它的所有内容一样被保留在页面边距框中。由于层叠样式的存在，你可以在段落或页面边距 n 框中应用样式。</p><h2 id="选择页面中运行-title-headers-的元素" tabindex="-1"><a class="header-anchor" href="#选择页面中运行-title-headers-的元素" aria-hidden="true">#</a> 选择页面中运行 title/headers 的元素</h2><p>在一个页面中，一个命名字符串的值或一个正在运行的元素的值可能会改变几次(例如，在同一个页面中有多个相同级别的标题)。你可以在 <code>string()</code> 函数或 <code>element()</code>函数上添加第二个可选参数，以表示页面中有多个元素时应该使用哪个元素。这个参数指定了命名字符串的值。可以与 <code>content</code> 属性的其他可能值结合使用。</p><ul><li><code>string(&lt;identifier&gt;, first)</code>: 使用页面上第一个赋值的值(默认)</li><li><code>string(&lt;identifier&gt;, start)</code>: 使用在页面开头分配的值。如果该元素是页面上的第一个元素，则就是这个元素。如果不是，则它是上一页的元素。</li><li><code>string(&lt;identifier&gt;, last)</code>: 使用页面上最后一个元素的值</li><li><code>string(&lt;identifier&gt;, first-except)</code>: 如果在页面上分配了值，则正在运行的元素不会显示在此页面上，但会显示在下一页上。</li></ul><p>前三个参数对于词典或术语表很有用。下面的图显示了根据参数显示的值：</p><p><img src="https://pagedjs.org/images/string-argument.png" alt="image.png"></p><h2 id="删除空白页中生成的内容" tabindex="-1"><a class="header-anchor" href="#删除空白页中生成的内容" aria-hidden="true">#</a> 删除空白页中生成的内容</h2><p>强制分页可以创建空白页，例如，自动添加以确保新章节从所需的左页或右页开始。 :blank 伪类选择器从流中选择没有内容的页面。要删除空白页中生成的内容，只需在空白页的选定边距框中使用 content: none</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@page</span><span class="token punctuation">:</span> blank</span> <span class="token punctuation">{</span>
  <span class="token atrule"><span class="token rule">@top-left</span></span> <span class="token punctuation">{</span>
    <span class="token property">content</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="设置外边距框和生成内容的样式" tabindex="-1"><a class="header-anchor" href="#设置外边距框和生成内容的样式" aria-hidden="true">#</a> 设置外边距框和生成内容的样式</h2><p>您可以通过将样式直接应用到页边距框的 at 规则中来风格化页边距框。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@page</span></span> <span class="token punctuation">{</span>
  <span class="token atrule"><span class="token rule">@top-left</span></span> <span class="token punctuation">{</span>
    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&#39;My title&#39;</span><span class="token punctuation">;</span>
    <span class="token property">padding-left</span><span class="token punctuation">:</span> 15mm<span class="token punctuation">;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> #ff5733<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="生成内容的默认对齐方式" tabindex="-1"><a class="header-anchor" href="#生成内容的默认对齐方式" aria-hidden="true">#</a> 生成内容的默认对齐方式</h2><p>每个边距框都有默认的内容对齐方式(如下表所示)。你可以通过在 at 规则中使用 text-align 和 vertical-align 属性来轻松地修改它</p><table><thead><tr><th>边距框</th><th>text-align</th><th>vertical-align</th></tr></thead><tbody><tr><td>@top-left-corner</td><td>right</td><td>middle</td></tr><tr><td>@top-left</td><td>left</td><td>middle</td></tr><tr><td>@top-center</td><td>center</td><td>middle</td></tr><tr><td>@top-right</td><td>right</td><td>middle</td></tr><tr><td>@top-right-corner</td><td>left</td><td>middle</td></tr><tr><td>@left-top</td><td>center</td><td>top</td></tr><tr><td>@left-middle</td><td>center</td><td>middle</td></tr><tr><td>@left-bottom</td><td>center</td><td>bottom</td></tr><tr><td>@right-top</td><td>center</td><td>top</td></tr><tr><td>@right-middle</td><td>center</td><td>middle</td></tr><tr><td>@right-bottom</td><td>center</td><td>bottom</td></tr><tr><td>@bottom-left-corner</td><td>right</td><td>middle</td></tr><tr><td>@bottom-left</td><td>left</td><td>middle</td></tr><tr><td>@bottom-center</td><td>center</td><td>middle</td></tr><tr><td>@bottom-right</td><td>right</td><td>middle</td></tr><tr><td>@bottom-right-corner</td><td>left</td><td>middle</td></tr></tbody></table><h2 id="在生成的内容上应用样式" tabindex="-1"><a class="header-anchor" href="#在生成的内容上应用样式" aria-hidden="true">#</a> 在生成的内容上应用样式</h2><p>你可以指定一些 CSS 规则只适用于外边距框，而其他规则适用于生成的内容。这取决于你如何创建生成的内容</p><h3 id="使用-position-running" tabindex="-1"><a class="header-anchor" href="#使用-position-running" aria-hidden="true">#</a> 使用 position:running()</h3><p>如果你使用了 <code>position: running</code> ，应用于生成内容的样式必须声明在运行元素中，应用于页边距框的样式必须声明在 at-rules 的页边距框中。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.running</span> <span class="token punctuation">{</span>
  <span class="token property">position</span><span class="token punctuation">:</span> <span class="token function">running</span><span class="token punctuation">(</span>chapTitle<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>
  <span class="token property">text-transform</span><span class="token punctuation">:</span> uppercase<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token atrule"><span class="token rule">@page</span><span class="token punctuation">:</span> left</span> <span class="token punctuation">{</span>
  <span class="token atrule"><span class="token rule">@top-left</span></span> <span class="token punctuation">{</span>
    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token function">element</span><span class="token punctuation">(</span>chapTitle<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">vertical-align</span><span class="token punctuation">:</span> top<span class="token punctuation">;</span>
    <span class="token property">padding-top</span><span class="token punctuation">:</span> 24px<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用-string-set" tabindex="-1"><a class="header-anchor" href="#使用-string-set" aria-hidden="true">#</a> 使用 string-set</h3><p>如果使用，则所有样式都声明在外边距框中，因此应用于外边距框。如果你想要某些规则只应用于文本，而不是整个外边距框，你将不得不使用 paged.js 创建的类来获取文本</p><p>例如，如果在页边距框的 at 规则中使用 background-color 和 padding，则样式将应用于边距框</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@page</span><span class="token punctuation">:</span> left</span> <span class="token punctuation">{</span>
  <span class="token atrule"><span class="token rule">@top-left</span></span> <span class="token punctuation">{</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> #ffd2b5<span class="token punctuation">;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> #fe4017<span class="token punctuation">;</span>
    <span class="token property">padding</span><span class="token punctuation">:</span> 2mm 5mm<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果:</p><p><img src="https://pagedjs.org/images/marginbox-style-01.png" alt="image.png"></p><p>如果你只想在生成的内容上应用这个背景色和内边距，你需要在 paged.js 创建的一个特殊 div 上应用这个样式:<code>.pagedjs_margin-content</code></p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.pagedjs_left_page .pagedjs_margin-top-left .pagedjs_margin-content</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> #ffd2b5<span class="token punctuation">;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> #fe4017<span class="token punctuation">;</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> 2mm 5mm<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果：</p><p><img src="https://pagedjs.org/images/marginbox-style-02.png" alt="image.png"></p><h2 id="定义边距框的宽度和高度" tabindex="-1"><a class="header-anchor" href="#定义边距框的宽度和高度" aria-hidden="true">#</a> 定义边距框的宽度和高度</h2><p>外边距框的高度和宽度由 paged.js 自动计算(参见下面的“外边距框的渲染”)，但是你可以轻松地使用相对值( % )或绝对值( mm ， in ， px )来定义你想要的大小。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@page</span></span> <span class="token punctuation">{</span>
  <span class="token atrule"><span class="token rule">@left-top</span></span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 28mm<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 10mm<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="旋转边距框" tabindex="-1"><a class="header-anchor" href="#旋转边距框" aria-hidden="true">#</a> 旋转边距框</h2><p>通过使用 <code>transform()</code> 属性，你可以轻松地旋转文档的边距框</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@page</span></span> <span class="token punctuation">{</span>
  <span class="token atrule"><span class="token rule">@left-top</span></span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 28mm<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 10mm<span class="token punctuation">;</span>
    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-90deg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">transform-origin</span><span class="token punctuation">:</span> top left<span class="token punctuation">;</span>
    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
    <span class="token property">top</span><span class="token punctuation">:</span> 28mm<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果:</p><p><img src="https://pagedjs.org/images/marginbox-style-03.png" alt="image.png"></p><h2 id="使用-paged-js-渲染外边距框" tabindex="-1"><a class="header-anchor" href="#使用-paged-js-渲染外边距框" aria-hidden="true">#</a> 使用 paged.js 渲染外边距框</h2><p>paged.js 使用 CSS grid 和 flexbox 来创建页面的外边距框。下图展示了 margin box 是如何与 div 类一起放置的</p><p>页面边距框</p><p><img src="https://pagedjs.org/images/margin-boxes_grid_01.png" alt="image.png"></p><p>页面由四个角落边距和四组边距组成，放置在一个三列三行的网格上。网格使用 Paged.js 根据你的边距和页面大小声明创建的边距变量来设置项目的大小。</p><h3 id="网格模板" tabindex="-1"><a class="header-anchor" href="#网格模板" aria-hidden="true">#</a> 网格模板</h3><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.pagedjs_pagebox</span> <span class="token punctuation">{</span>
  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span>
    [left] <span class="token function">var</span><span class="token punctuation">(</span>--pagedjs-margin-left<span class="token punctuation">)</span>
    [center] <span class="token function">calc</span><span class="token punctuation">(</span>
      <span class="token function">var</span><span class="token punctuation">(</span>--pagedjs-pagebox-width<span class="token punctuation">)</span> - <span class="token function">var</span><span class="token punctuation">(</span>--pagedjs-margin-left<span class="token punctuation">)</span> - <span class="token function">var</span><span class="token punctuation">(</span>--pagedjs-margin-right<span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
    [right] <span class="token function">var</span><span class="token punctuation">(</span>--pagedjs-margin-right<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">grid-template-rows</span><span class="token punctuation">:</span>
    [header] <span class="token function">var</span><span class="token punctuation">(</span>--pagedjs-margin-top<span class="token punctuation">)</span>
    [page] <span class="token function">calc</span><span class="token punctuation">(</span>
      <span class="token function">var</span><span class="token punctuation">(</span>--pagedjs-pagebox-height<span class="token punctuation">)</span> - <span class="token function">var</span><span class="token punctuation">(</span>--pagedjs-margin-top<span class="token punctuation">)</span> - <span class="token function">var</span><span class="token punctuation">(</span>--pagedjs-margin-bottom<span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
    [footer] <span class="token function">var</span><span class="token punctuation">(</span>--pagedjs-margin-bottom<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="角落边距的类别-以及在页面网格中的位置" tabindex="-1"><a class="header-anchor" href="#角落边距的类别-以及在页面网格中的位置" aria-hidden="true">#</a> 角落边距的类别(以及在页面网格中的位置)</h3><ul><li><code>div.pagedjs_margin-top-left-corner-holder</code> (grid-column: left / grid-row: header)</li><li><code>div.pagedjs_margin-top-right-corner-holder</code> (grid-column: right / grid-row: header)</li><li><code>div.pagedjs_margin-bottom-left-corner-holder</code> (grid-column: left / grid-row: footer)</li><li><code>div.pagedjs_margin-bottom-right-corner-holder</code> (grid-column: right / grid-row: header)</li></ul><h3 id="页边距组的类-以及在页面网格上的位置" tabindex="-1"><a class="header-anchor" href="#页边距组的类-以及在页面网格上的位置" aria-hidden="true">#</a> 页边距组的类(以及在页面网格上的位置)</h3><ul><li>顶部页边距:<code>div.pagedjs_margin-top</code> (grid-column: center / grid-row: header)</li><li>底部页边距:<code>div.pagedjs_margin-bottom</code> (grid-column: center / grid-row: bottom)</li><li>左边距:<code>div.pagedjs_margin-left</code> (grid-column: left / grid-row: page)</li><li>右边距: <code>div.pagedjs_margin-right</code> (grid-column: right / grid-row: page)</li></ul><h2 id="边距框组" tabindex="-1"><a class="header-anchor" href="#边距框组" aria-hidden="true">#</a> 边距框组</h2><p>每个页边距组包含三个页边距框，它们包含在一个单向网格中(页顶和页底页边距为水平，页左和页右页边距为垂直)。</p><p><img src="https://pagedjs.org/images/margin-boxes_grid_02.png" alt="image.png"></p><h3 id="top-page-margins" tabindex="-1"><a class="header-anchor" href="#top-page-margins" aria-hidden="true">#</a> Top page margins</h3><ul><li><code>div.pagedjs_margin-top-left</code> (A)</li><li><code>div.pagedjs_margin-top-center</code> (B)</li><li><code>div.pagedjs_margin-top-right</code> (C)</li></ul><h3 id="bottom-page-margins" tabindex="-1"><a class="header-anchor" href="#bottom-page-margins" aria-hidden="true">#</a> Bottom page margins</h3><ul><li><code>div.pagedjs_margin-bottom-left</code> (A)</li><li><code>div.pagedjs_margin-bottom-center</code> (B)</li><li><code>div.pagedjs_margin-bottom-right</code> (C)</li></ul><h3 id="left-page-margins" tabindex="-1"><a class="header-anchor" href="#left-page-margins" aria-hidden="true">#</a> Left page margins</h3><ul><li><code>div.pagedjs_margin-left-top</code> (A)</li><li><code>div.pagedjs_margin-left-middle</code> (B)</li><li><code>div.pagedjs_margin-left-bottom</code> (C)</li></ul><h3 id="right-page-margins" tabindex="-1"><a class="header-anchor" href="#right-page-margins" aria-hidden="true">#</a> Right page margins</h3><ul><li><code>div.pagedjs_margin-right-top</code> (A)</li><li><code>div.pagedjs_margin-right-middle</code> (B)</li><li><code>div.pagedjs_margin-right-bottom</code> (C)</li></ul><h2 id="将生成的内容放到边距框中" tabindex="-1"><a class="header-anchor" href="#将生成的内容放到边距框中" aria-hidden="true">#</a> 将生成的内容放到边距框中</h2><p>每个边距框以 <code>flex</code> 显示，并包含一个 <code>div</code> 元素和 <code>pagedjs_margin-content</code> 类，生成的内容将放在其中。 更多细节请参阅上面的两部分:“为命名字符串添加样式”和“为运行元素添加样式”。</p><h2 id="边距框组的计算规则" tabindex="-1"><a class="header-anchor" href="#边距框组的计算规则" aria-hidden="true">#</a> 边距框组的计算规则</h2><p>如果在样式表中没有设置固定的外边距框大小，每个外边距组的外边距框将根据以下规则自动计算。</p><ul><li>对于顶部和底部页边距，高度为 margin box 组的 100%</li><li>对于左右页边距，宽度为 margin box 组的 100%</li></ul><p>对于上下页边距宽度和左右页边距高度，计算规则遵循相同的模式。这种模式取决于在组中生成(填充)多少边距——例如， content 已经在 at 规则中为页边距框设置了</p><p>在这里，为了解释这种计算规则模式，我们使用字母对应每组的三个框。&quot;Size&quot;对应于上下页边距的&quot;width&quot;，左右页边距的&quot;height&quot;。</p><h3 id="如果只生成一个外边距框" tabindex="-1"><a class="header-anchor" href="#如果只生成一个外边距框" aria-hidden="true">#</a> 如果只生成一个外边距框</h3><p>如果只生成一个外边距框，外边距框将占据外边距组的全部宽度/高度。</p><p><img src="https://pagedjs.org/images/margin-boxes_size_sample-01.png" alt="image.png"></p><h3 id="如果生成两个边距框" tabindex="-1"><a class="header-anchor" href="#如果生成两个边距框" aria-hidden="true">#</a> 如果生成两个边距框</h3><p>如果生成 A 和 C</p><p>没有设置大小：B 的大小为 0 ，A 和 C 继承 margin 组的大小。它们的大小与生成的内容的长度有关。</p><p><img src="https://pagedjs.org/images/margin-boxes_size_sample-02.png" alt="image.png"></p><p>如果只设置一个尺寸(A 或 C)：B 的尺寸为 0。 A 和 C 的尺寸分布在 margin 组的大小上.未设置尺寸的 margin 框填充 margin 组的剩余空间</p><p><img src="https://pagedjs.org/images/margin-boxes_size_sample-03.png" alt="image.png"></p><p>对于设置两个大小(A 和 C)：A 对齐 margin 组的左边，C 对齐 margin 组的右边，B 占用剩余空间但没有内容。</p><p><img src="https://pagedjs.org/images/margin-boxes_size_sample-04.png" alt="image.png"></p><p>如果 A 和 B 或 B 和 C 产生</p><p>没有设置大小：margin-box 的大小将与生成的内容的长度相关，位于中间的将始终位于中间(“中心规则”)，即 A 的大小将始终等于 C 的大小。</p><p><img src="https://pagedjs.org/images/margin-boxes_size_sample-05.png" alt="image.png"></p><p>当设置一个尺寸(A,B 或 C)时，其他两个边距框(没有设置尺寸)将扩展剩余空间，“中心规则”仍然有效，因此两个边距框的自动尺寸将根据该规则分配。</p><p><img src="https://pagedjs.org/images/margin-boxes_size_sample-06.png" alt="image.png"></p><p>两个大小设置：两个大小设置的 margin box 将具有声明的大小，第三个 margin box(没有内容)将取组中剩余空间的大小</p><p><img src="https://pagedjs.org/images/margin-boxes_size_sample-07.png" alt="image.png"></p><h3 id="如果所有边距框都生成了" tabindex="-1"><a class="header-anchor" href="#如果所有边距框都生成了" aria-hidden="true">#</a> 如果所有边距框都生成了</h3><p>如果没有设置大小：margin-boxes 的大小将与生成的内容的长度相关，位于中间的将始终处于中间(“中心规则”)，即 A 的大小将始终等于 C 的大小。 <img src="https://pagedjs.org/images/margin-boxes_size_sample-08.png" alt="image.png"></p><p>如果设置了一个尺寸(A, B 或 C):其他两个边距(没有设置尺寸)将扩展剩余的空间。“中心规则”仍然有效，因此两个边距框的自动大小将根据该规则分配。 <img src="https://pagedjs.org/images/margin-boxes_size_sample-09.png" alt="image.png"></p><p>如果设置了两个大小:两个设置了大小的边距框将具有声明的大小。第三个边距框(它没有内容)将占用组中剩余空间的大小。 <img src="https://pagedjs.org/images/margin-boxes_size_sample-10.png" alt="image.png"></p><p>如果设置了所有的尺寸:所有的边距框都有声明的尺寸。它们将在顶部/底部页边距的左侧对齐，在顶部为左侧/右侧页边距对齐。 <img src="https://pagedjs.org/images/margin-boxes_size_sample-11.png" alt="image.png"></p>`,125);function v(h,b){const a=i("ExternalLinkIcon");return c(),o("div",null,[u,s("p",null,[n("现在，重置页面计数为 1 是唯一可能的情况。请查看 "),s("a",d,[n("Issue #31"),t(a)]),n(" 以跟踪该情况。")]),r,s("p",null,[n("这部分在 Paged.js 中暂时不能正常工作，问题 "),s("a",g,[n("#45"),t(a)]),n(","),s("a",k,[n("#42"),t(a)])]),m])}const x=p(l,[["render",v],["__file","generated-content-in-margin-boxes.html.vue"]]);export{x as default};
