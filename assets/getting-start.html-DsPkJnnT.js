import{_ as l,r as i,o as p,c as o,b as s,d as a,e as n,a as t}from"./app-CnbvU9a-.js";const d={},c=t('<h1 id="开始使用paged-js" tabindex="-1"><a class="header-anchor" href="#开始使用paged-js" aria-hidden="true">#</a> 开始使用paged.js</h1><h2 id="开始paged-js" tabindex="-1"><a class="header-anchor" href="#开始paged-js" aria-hidden="true">#</a> 开始Paged.js</h2><p>paged.js有两种版本: 一种是启动浏览器时自动运行的腻子脚本，还有一种是可以运行的npm模块，或者使用无头浏览器的命令行。所有这些都可以很容易地适应您的需要，选择对你更方便的方式。</p><h3 id="在web浏览器中使用paged-js作为腻子脚本" tabindex="-1"><a class="header-anchor" href="#在web浏览器中使用paged-js作为腻子脚本" aria-hidden="true">#</a> 在web浏览器中使用paged.js作为腻子脚本</h3><p>为了在你的文档上运行paged.js，你需要准备:</p><ul><li>要转换成书的html和css文件;</li><li>paged.js脚本(本地或使用CDN链接)</li><li>一个web服务器，让polyfill访问你的CSS文件;</li><li>一个web浏览器可以在屏幕上看到神奇效果。</li></ul><h3 id="获取脚本" tabindex="-1"><a class="header-anchor" href="#获取脚本" aria-hidden="true">#</a> 获取脚本</h3>',7),r={href:"https://unpkg.com/pagedjs/dist/",target:"_blank",rel:"noopener noreferrer"},u=t(`<p>将脚本复制到一个文件中，并在HTML文件的头部调用它</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>js/paged.polyfill.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,2),h={href:"https://unpkg.com/pagedjs@0.4.3/dist/paged.js",target:"_blank",rel:"noopener noreferrer"},g={href:"https://unpkg.com/browse/pagedjs@0.4.3/",target:"_blank",rel:"noopener noreferrer"},m=t(`<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://unpkg.com/pagedjs/dist/paged.polyfill.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>一旦浏览器加载了所有需要显示在屏幕上的 HTML 内容(包括图像、字体文件等)，脚本将开始进行分页，页面也将出现在屏幕上。</p><h3 id="预览你的工作-界面" tabindex="-1"><a class="header-anchor" href="#预览你的工作-界面" aria-hidden="true">#</a> 预览你的工作(界面)</h3>`,3),v=s("code",null,"@media screen",-1),k={href:"https://gitlab.coko.foundation/pagedjs/interface-polyfill",target:"_blank",rel:"noopener noreferrer"},b=s("code",null,"interface.css",-1),_=s("code",null,"<head>",-1),f=t(`<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>path/to/file/interface.css<span class="token punctuation">&quot;</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/css<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="从浏览器生成您的第一个-pdf" tabindex="-1"><a class="header-anchor" href="#从浏览器生成您的第一个-pdf" aria-hidden="true">#</a> 从浏览器生成您的第一个 PDF</h3><p>一旦Paged.js完成工作，你就可以使用浏览器的保存为PDF功能生成PDF文件。</p><p>1 单击浏览器的<code>打印</code>按钮(它很可能位于 <code>文件 &gt; 打印</code> 处，或者在键盘上是<code>CTRL/CMD + P</code> )。 2 将<code>目标</code>改为<code>保存为PDF文件</code>。 3 在更多设置中，由于 Paged.js 没有使用任何这些选项，所以你需要确保以下语句是正确的:</p><ul><li>边距设置为无</li><li>页眉页脚设置为不选中</li><li>背景图形选中</li></ul><p>然后，您可以在您喜欢的 PDF 阅读工具中打开 PDF</p><h2 id="命令行版本" tabindex="-1"><a class="header-anchor" href="#命令行版本" aria-hidden="true">#</a> 命令行版本</h2><p>Paged.js 的命令行版本使用无头浏览器(没有任何图形界面的浏览器)生成 PDF。它可以在服务器上运行，以在完全自动化的工作流中启动无头 Chromium.使用命令行版本，您不需要在文档中调用 Paged.js 脚本：它将自动完成。</p><p>首先，在你的终端中下载并安装 <code>pagedjs-cli</code> (你需要安装 <code>git</code>，<code>node</code>和 <code>npm</code>)：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> pagedjs-cli pagedjs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后，在新的终端窗口中，转到文档代码所在的文件夹(使用 <code>cd</code> 命令)，并使用以下命令生成 PDF：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pagedjs-cli index.html <span class="token parameter variable">-o</span> result.pdf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>生成 PDF 的一些选项：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>-h, --help                  输出使用信息
-V, --version               输出版本号
-i, --inputs [inputs]       输入
-o, --output [output]       输出
-d, --debug                 展示 Electron 窗方便调试
-l, --landscape             横向打印
-s, --page-size [size]      打印的页面大小 [size]
-w, --width [size]          打印的页面宽度 [width]
-h --height [size]          打印的页面高度 [weight]
-m, --page-margin [margin]  打印的编剧 [margin]
-n, --hyphenate [lang]      语言连字符[language], 默认为 &quot;en-us&quot;
-hi, --hypher_ignore [str]  被忽略的元素选择器,例如 &quot;.class_to_ignore, h1&quot;
-ho, --hypher_only [str]    O只能使用连字符连接传递的元素选择器, 例如 &quot;.hyphenate, aside&quot;
-e, --encoding [type]       设置输入html文件的编码, 默认为 &quot;utf-8&quot;
-t, --timeout [ms]          设置最大超时时间 [ms]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14);function j(x,q){const e=i("ExternalLinkIcon");return p(),o("div",null,[c,s("p",null,[a("要下载polyfill，请访问"),s("a",r,[a("https://unpkg.com/pagedjs/dist/"),n(e)]),a("。从这里，您可以选择 paged.polyfill.js 的最新版本或者老版本。")]),u,s("p",null,[a("如果您愿意，可以使用在"),s("a",h,[a("unpkg.com/pagedjs"),n(e)]),a("上的托管版本， 您可以通过复制文档以下代码行放置到你html中head标签中来使用它。如果你需要paged.js以前的版本，可以在"),s("a",g,[a("unpgk.com/browse/pagedjs"),n(e)]),a("上查看发行版。请注意右上角的版本选择，以获得旧版本。")]),m,s("p",null,[a("Paged.js 将操纵 DOM，以便浏览器能够理解你编写的 CSS 规则。在屏幕上，页面将从上到下显示在页面的左侧。为了更好地理解页面上发生了什么，我们制作了一个小的 CSS 文件调用接口，定义了在屏幕上显示书本的布局。由于我们使用的是 "),v,a(" ，所以打印时页面边框和阴影不会出现在纸上。要下载接口文件，请访问 "),s("a",k,[a("gitlab"),n(e)]),a(" 上的仓库，下载 "),b,a(" 文件，并在 "),_,a(" 中将其链接到您的文档中。请检查该文件，因为它已经提供了显示对页、正反面、基线等选项。")]),f])}const y=l(d,[["render",j],["__file","getting-start.html.vue"]]);export{y as default};
