import{_ as e,r as p,o as c,c as o,b as a,d as n,e as l,a as s}from"./app-CnbvU9a-.js";const u={},i=s(`<h1 id="交叉引用" tabindex="-1"><a class="header-anchor" href="#交叉引用" aria-hidden="true">#</a> 交叉引用</h1><p>许多文档包含内部引用，如“参见第 7 章”或“在第 23 页”。引用可能会根据布局而改变(特别是页码)。因此，您可以使用生成的内容来创建它。</p><p>你可以使用 content 属性的特定值来自动创建这些类型的交叉引用：target-counter()、target-text()。 它们中的每一个都显示从链接目标中获得的信息。</p><p>你可以使用这个 target-counter() 和 target-text() 函数来创建目录和书籍索引(参见下面的部分)。</p><h2 id="链接目标" tabindex="-1"><a class="header-anchor" href="#链接目标" aria-hidden="true">#</a> 链接目标</h2><p>对于交叉引用，使用链接来定位文档中的锚点。</p><p>首先，在 HTML 中，您在文档中定义了一个具有唯一 id 的相关元素。例如，文档的图 3：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>figure</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>figure-3<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>image.jpg<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>caption<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Figure 3: an image<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>figure</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 HTML 的其他地方，创建一个链接锚，引用相关元素的唯一标识符：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>see the <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>link<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#figure-3<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>figure 3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="target-counter" tabindex="-1"><a class="header-anchor" href="#target-counter" aria-hidden="true">#</a> Target-counter()</h2>`,11),r={href:"https://www.w3.org/TR/css-gcpm-3/#target-counter",target:"_blank",rel:"noopener noreferrer"},k=s(`<div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.link::after</span> <span class="token punctuation">{</span>
  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&#39;, page &#39;</span> <span class="token function">target-counter</span><span class="token punctuation">(</span><span class="token function">attr</span><span class="token punctuation">(</span>href url<span class="token punctuation">)</span><span class="token punctuation">,</span> page<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此代码使用名为 link 的样式类获取所有元素，并使用在每个第一个元素的 href 属性中指定的唯一标识符搜索元素。当您的文档被呈现时，它将生成具有唯一标识符的元素所在页面的页码。</p><p>使用下面的示例，在文档中生成的文本将是“see the figure 3, page 27”。</p><p>你也可以指定一个计数器样式:</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.link::after</span> <span class="token punctuation">{</span>
  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token function">target-counter</span><span class="token punctuation">(</span><span class="token function">attr</span><span class="token punctuation">(</span>href url<span class="token punctuation">)</span><span class="token punctuation">,</span> page<span class="token punctuation">,</span> lower-roman<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>目前， target-counter() 函数只对计数器页起作用。这意味着你不能使用其他给定名称的计数器。</p><h2 id="target-text" tabindex="-1"><a class="header-anchor" href="#target-text" aria-hidden="true">#</a> Target-text()</h2><p>target-text()函数的工作原理与 target-counter()类似，但它取得的是由 URL 指向的元素的文本值。例如，你可以用它来设置章节的标题</p><p>在 HTML 中，使用唯一标识符创建章节标题:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>chapter-1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Chapter 1. The beginning<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在文档的后面创建一个指向本章内容的链接:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
  Some text that refer to the <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>link<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#chapter-1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>chapter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>.
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 CSS 中，使用 target-text 来生成交叉引用:</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.link::after</span> <span class="token punctuation">{</span>
  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&#39;(see &#39;</span> <span class="token function">target-text</span><span class="token punctuation">(</span><span class="token function">attr</span><span class="token punctuation">(</span>href url<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token string">&#39;)&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在你的文档中生成的文本将是“Some text that refer to the chapter (see Chapter 1. The beginning).”</p><p>W3C 定义了一个可选的第二个参数，用于指定检索什么内容，使用与 string-set 属性相同的值( content ， before ， after ， first-letter )，但尚未在 paged.js 中实现。</p><h2 id="调试" tabindex="-1"><a class="header-anchor" href="#调试" aria-hidden="true">#</a> 调试</h2><p>这些函数只接受指向当前文档中某个位置的片段 URL。如果没有片段，或者引用的 ID 不存在，或者 URL 指向外部文档，那么对于 target-text()，函数什么也不返回;对于 target-counter()，函数返回 0</p><p>然而，如果你的文档很长，可能你的目标元素还没有加载，函数也不会返回任何内容或 0 。等待加载完成，生成页码。</p><p>如果你的页码看起来错了，可能是因为你的目标元素在几页上被分割了。我们推荐使用简短的元素作为目标(章节标题而不是整个章节部分)。</p>`,20);function d(g,h){const t=p("ExternalLinkIcon");return c(),o("div",null,[i,a("p",null,[n("生成的内容被设置到你的 CSS 中。为了找到在文档中出现相关元素的页面，在 content 属性中使用 "),a("a",r,[n("target-counter()"),l(t)]),n("函数，该属性被设置为 ::before 或 ::after 伪元素。与所有内容属性一样，它可以包含一些文本：")]),k])}const m=e(u,[["render",d],["__file","cross-references.html.vue"]]);export{m as default};
