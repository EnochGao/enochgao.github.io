import{_ as n,o as s,c as a,a as e}from"./app-CnbvU9a-.js";const t={},c=e(`<h1 id="生成内容" tabindex="-1"><a class="header-anchor" href="#生成内容" aria-hidden="true">#</a> 生成内容</h1><p>CSS 中的 content 属性是一种强大的向内容添加结构的方法，无需在 HTML 中进行修改</p><p>CSS 的一个重要优点是它可以帮助你将文档的样式与内容分开。HTML 和 CSS 的分离使得维护站点、跨页面共享样式表以及在不同环境下显示文档变得更加容易。 在某些情况下，一些元素并不是内容本身的一部分，但有助于在不同环境下阅读。这可以是辅助信息，比如在图表标题前插入单词“Figure”，或者在第七章标题前插入单词“Chapter 7”。</p><p>这些通常是使用 CSS 内容属性生成的，这将避免在内容中间添加数字时出现问题，而且如果你想在另一本书中重用这一章节，有了一种新的数字编号方式。</p><p>从技术上说，生成的内容只存在于网页文档的布局中：它们不是 DOM 树的一部分。</p><h2 id="内容属性" tabindex="-1"><a class="header-anchor" href="#内容属性" aria-hidden="true">#</a> 内容属性</h2><p><code>content</code> 属性用于 <code>::before</code> 和 <code>::after</code> 伪元素中，在声明中，指定 <code>content</code> 属性的值，例如，下面的规则在每个含有 “note”样式类的元素前插入字符串 “Note：”：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.note::before</span> <span class="token punctuation">{</span>
  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&#39;Note: &#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以在设置元素的地方为它赋予样式，如下所示：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.note::before</span> <span class="token punctuation">{</span>
  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&#39;Note: &#39;</span><span class="token punctuation">;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
  <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="生成文本" tabindex="-1"><a class="header-anchor" href="#生成文本" aria-hidden="true">#</a> 生成文本</h2><p>你可以直接在 CSS 中声明你的文本(如上)，但你也可以使用 data- 自定义属性中指定的文本。</p><p>在你的 HTML 中:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ref<span class="token punctuation">&quot;</span></span> <span class="token attr-name">data-ref-id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0215<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Some blabla as a reference<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在你的 CSS 中:</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">p.ref::before</span> <span class="token punctuation">{</span>
  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token function">attr</span><span class="token punctuation">(</span>data-ref-id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以在 content 属性中组合元素：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">p.ref::before</span> <span class="token punctuation">{</span>
  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&#39;Reference &#39;</span> <span class="token function">attr</span><span class="token punctuation">(</span>data-ref-id<span class="token punctuation">)</span> <span class="token string">&#39;: &#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一旦显示，您将得到以下文本：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Reference 0215: Some blabla as a reference
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="生成计数器" tabindex="-1"><a class="header-anchor" href="#生成计数器" aria-hidden="true">#</a> 生成计数器</h2><p><code>css-counter</code> 是一个 CSS 属性，可以对内容中的元素进行计数， 例如，你可能想在每个图片标题前添加一个数字，为此，你需要在 <code>&lt;body&gt;</code> 选择器中重置计数器， 每当内容中出现一个标题时就增加计数器，并在 <code>::before</code> 伪元素中显示该数字。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">body</span> <span class="token punctuation">{</span>
  <span class="token property">counter-reset</span><span class="token punctuation">:</span> figureNumber<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">figcaption</span> <span class="token punctuation">{</span>
  <span class="token property">counter-increment</span><span class="token punctuation">:</span> figureNumber<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">figcaption::before</span> <span class="token punctuation">{</span>
  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token function">counter</span><span class="token punctuation">(</span>figureNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="生成图像" tabindex="-1"><a class="header-anchor" href="#生成图像" aria-hidden="true">#</a> 生成图像</h2><p>如果你需要在生成的内容中包含图像，可以像这样做：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.glossary::after</span> <span class="token punctuation">{</span>
  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&#39; &#39;</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">&#39;/images/glossary-icon.png&#39;</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="生成链接" tabindex="-1"><a class="header-anchor" href="#生成链接" aria-hidden="true">#</a> 生成链接</h2><p>当你想打印你的网页时，它可以用一个长 URL 来显示你内容的实际链接。下面的例子在每个<code>&lt;a&gt;</code> 元素后面的括号中插入 <code>href</code> 属性的值：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">a::after</span> <span class="token punctuation">{</span>
  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&#39; (&#39;</span> <span class="token function">attr</span><span class="token punctuation">(</span>href<span class="token punctuation">)</span> <span class="token string">&#39;)&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="为分页媒体生成内容" tabindex="-1"><a class="header-anchor" href="#为分页媒体生成内容" aria-hidden="true">#</a> 为分页媒体生成内容</h2><p>即使没有 paged.js，也可以使用生成的内容; <code>content</code> 是所有浏览器都实现的 CSS 属性。</p><p>但是，要设计一本书(或分页内容)，您需要添加一些元素来帮助读者在页面之间导航:页眉和页脚、页码、目录、索引、交叉引用等。</p><p>这些元素不作为内容存在于 HTML 中，您需要自动创建它们。要做到这一点，你可以使用 paged.js 实现的一种语法和属性的组合，即为页面媒体生成内容(Generated Content for page Media)。</p>`,33),p=[c];function o(i,l){return s(),a("div",null,p)}const d=n(t,[["render",o],["__file","generated-content.html.vue"]]);export{d as default};
